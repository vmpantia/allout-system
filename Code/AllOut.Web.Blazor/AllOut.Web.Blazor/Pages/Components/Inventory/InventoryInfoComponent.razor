@inject IHTTPService _http

<ModalInfo @ref="modalInfo"
           ModalIcon="@icon" ModalTitle="@title" ModalDescription="@description"
           SaveButtonClicked="SaveButtonClicked"
           CancelButtonClicked="CancelButtonClicked">
    <Fields>
        <TextBox Label="Inventory ID" ControlEnableState="false" @bind-BindingValue="@inventoryInfo.InventoryID" />
        <NumberBox Label="Quantity" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@inventoryInfo.Quantity" />
        <ComboBox Label="Product" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@inventoryInfo.ProductID"
                  DataSource="@productList" ValueMember="ProductID" DisplayMember="Name"/>
    </Fields>
</ModalInfo>

@code {
    #region Variable(s)
    private ModalInfo? modalInfo;

    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private bool isAdd = false;

    private Inventory inventoryInfo = new Inventory();

    private List<Product> productList = new List<Product>();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> InventoryInfoResponse { get; set; }
    #endregion

    public async Task InitializeInventory(string inventoryID)
    {
        //Check if the transaction is add or edit
        isAdd = string.IsNullOrEmpty(inventoryID);

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        await PopulateProducts();

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_INVENTORY_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   inventoryID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        inventoryInfo = JsonConvert.DeserializeObject<Inventory>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        if (modalInfo != null)
            modalInfo.ControlEnableState = inventoryInfo.Status == Constants.STATUS_ENABLED_INT;
    }

    #region Event Handler Functions
    private async Task SaveButtonClicked()
    {
        inventoryInfo.InventoryID = isAdd ? string.Empty : inventoryInfo.InventoryID;

        //Prepare Request for Save
        var request = new SaveInventoryRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_INVENTORY_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_INVENTORY_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputInventory = inventoryInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_INVENTORY, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }

        Reset(false);
        await InventoryInfoResponse.InvokeAsync(response);
    }

    private async Task CancelButtonClicked()
    {
        Reset(false);
        await InventoryInfoResponse.InvokeAsync(null);
    }
    #endregion

    #region Common Functions
    private async Task PopulateProducts()
    {
        var response = await _http.GetRequestAsync(Globals.GET_PRODUCTS_BY_STATUS,
                                                   Globals.ClientInformation.ClientID,
                                                   Constants.STATUS_ENABLED_INT);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        productList = JsonConvert.DeserializeObject<List<Product>>(response.Data)!;
    }

    private void Reset(bool isModalShow)
    {
        if (modalInfo != null)
        {
            modalInfo.ModalVisibleState = isModalShow;
            modalInfo.ControlEnableState = true;
            modalInfo.ErrorMessageValue = string.Empty;
        }
        //Reset
        inventoryInfo = new Inventory();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_INVENTORY);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_INVENTORY);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
    #endregion
}
