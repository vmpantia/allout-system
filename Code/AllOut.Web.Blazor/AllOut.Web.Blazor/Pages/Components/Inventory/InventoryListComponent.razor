@page "/Inventory"
@inject IHTTPService _http
@inject IToastService _toast

<Loader Show="@showLoader"></Loader>

<InventoryInfoComponent @ref="inventoryInfo" InventoryInfoResponse="GetResponse" />

<Title Icon="oi oi-tag"
       Name="Inventory"
       Description="In this page you can view all the Inventory that is saved in the system." />

<Actions StatusButtonValue="@statusButtons" 
         AddButtonClicked="ShowInfo"
         StatusButtonsClicked="StatusButtonClicked"
         SearchValueChanged="SearchChanged" />

<Table DataSource="inventoryList" TItem="InventoryFullInformation" ColumnCount="11" Pagination="true">
    <Columns>
        <Column Name="Select" CheckBoxHeader="true" CheckBoxValue="@selectAllValue" CheckBoxStateChanged="SelectAllChanged">
            <input class="form-check-input" type="checkbox" checked="@context.isSelect" 
                   @onclick="() => SelectChanged(context)">
        </Column>
        <Column Name="InventoryID" Label="ID" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="Name" Label="Name" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="ProductName" Label="Product" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="BrandName" Label="Brand" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="CategoryName" Label="Category" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="Quantity" Label="Quantity" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="Status" Label="Status" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="CreatedDate" Label="Created Date" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="ModifiedDate" Label="Modified Date" Sortable="true" SortStateChanged="SortChanged" />
        <Column Name="Action" Label="Action">
            <button class="cstm-table-button" title="Edit" 
                    @onclick="() => ShowInfo(context.InventoryID)">
                <span class="oi oi-pencil" aria-hidden="true"></span>
            </button>
        </Column>
    </Columns>
</Table>

@code {
    private bool showLoader = false;
    private bool selectAllValue = false;
    private bool statusButtons = true;

    private InventoryInfoComponent? inventoryInfo;
    private List<InventoryFullInformation> inventoryList = new List<InventoryFullInformation>();

    #region Event Handler Functions
    protected override async Task OnInitializedAsync()
    {
        showLoader = true;
        ////Delay Process for .5 second
        await Task.Delay(Constants.DELAY_PROCESS);
        await PopulateInventories();
        showLoader = false;
    }

    private async Task ShowInfo(object id)
    {
        SelectAllChanged(false);

        if (inventoryInfo == null)
            return;

        var param = id == null ? string.Empty : (string)id;
        await inventoryInfo.InitializeInventory(param);
    }

    private async Task SearchChanged(string query)
    {
        await PopulateInventories(query);
    }

    private async Task StatusButtonClicked(int value)
    {
        var functionID = string.Empty;
        switch (value)
        {
            case Constants.STATUS_ENABLED_INT:
                functionID = Constants.FUNCTION_ID_BULK_CHANGE_INVENTORY_BY_ADMIN;
                break;
            case Constants.STATUS_DISABLED_INT:
                functionID = Constants.FUNCTION_ID_BULK_CHANGE_INVENTORY_BY_ADMIN;
                break;
            default:
                functionID = Constants.FUNCTION_ID_BULK_DELETE_INVENTORY_BY_ADMIN;
                break;
        }
        await UpdateStatusByIDs(functionID, Constants.REQUEST_STATUS_COMPLETED, value);
    }

    private async Task GetResponse(Response res)
    {
        if (res != null && res.Result == ResponseResult.SUCCESS)
        {
            await PopulateInventories();
            _toast.ShowSuccess(res.Data);
        }
    }

    private void SelectChanged(InventoryFullInformation inventory)
    {
        inventory.isSelect = !inventory.isSelect;
        EnableStatusButtons();
    }

    private void SelectAllChanged(bool value)
    {
        selectAllValue = value;
        foreach (var inventory in inventoryList)
        {
            inventory.isSelect = value;
        }
        EnableStatusButtons();
    }

    private void SortChanged(SortSetting sort)
    {
        inventoryList = Utility.SortList<InventoryFullInformation>(inventoryList, sort);
    }
    #endregion

    #region Common Functions
    private async Task PopulateInventories(string? query = null)
    {
        selectAllValue = false;

        Response response;
        if (string.IsNullOrEmpty(query))
            response = await _http.GetRequestAsync(Globals.GET_INVENTORIES, Globals.ClientInformation.ClientID);
        else
            response = await _http.GetRequestAsync(Globals.GET_INVENTORIES_BY_QUERY, Globals.ClientInformation.ClientID, query);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }

        inventoryList = JsonConvert.DeserializeObject<List<InventoryFullInformation>>(response.Data)!;
        EnableStatusButtons();
    }

    private async Task UpdateStatusByIDs(string functionID, string requestStatus, int newStatus)
    {
        var request = new UpdateStatusByGUIDsRequest
            {
                FunctionID = functionID,
                RequestStatus = requestStatus,
                client = Globals.ClientInformation,
                IDs = inventoryList.Where(data => data.isSelect)
                                   .Select(data => data.BrandID)
                                   .ToList(),
                newStatus = newStatus
            };

        var response = await _http.PostRequestAsync(Globals.POST_UPDATE_INVENTORY_STATUS_BY_IDS, request);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }
        await PopulateInventories();
        _toast.ShowSuccess(response.Data);
    }

    private void EnableStatusButtons()
    {
        statusButtons = inventoryList.Where(data => data.isSelect).Count() == 0;
    }
    #endregion
}
