@inject IHTTPService _http

@if (showModal)
{
    <!-- Modal -->
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <Title Icon="@icon"
                       Name="@title"
                       Description="@description"></Title>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="name" disabled="@disableEdit" @bind="roleInfo.Name">
                    </div>

                    <div class="mb-3">
                        <label for="table" class="form-label">Permissions</label>
                        <table class="cstm-table" id="table">
                            <thead>
                                <tr>
                                    <th>Permission</th>
                                    <th>Add</th>
                                    <th>Edit</th>
                                    <th>Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var properties = roleInfo.GetType().GetProperties();

                                    foreach (var property in properties)
                                    {
                                        if (property.Name.Contains(Constants.PROP_PERMISSION))
                                        {
                                            var name = property.Name.Replace(Constants.PROP_PERMISSION, string.Empty);
                                            var permission = property.GetValue(roleInfo);
                                            if (permission == null)
                                                return;

                                            <tr>
                                                <td>@name</td>
                                                <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" checked="@Utility.IsPermitted((int)permission, PermissionType.ADD)" @onclick="() => CheckBoxClick(property, PermissionType.ADD)"></td>
                                                <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" checked="@Utility.IsPermitted((int)permission, PermissionType.EDIT)" @onclick="() => CheckBoxClick(property, PermissionType.EDIT)"></td>
                                                <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" checked="@Utility.IsPermitted((int)permission, PermissionType.DELETE)" @onclick="() => CheckBoxClick(property, PermissionType.DELETE)"></td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-sm" disabled="@disableEdit" @onclick="() => Save()">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                        Save
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Cancel()">
                        <span class="oi oi-x" aria-hidden="true"></span>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    #region Variable(s)
    //Variable for showing and hiding modal
    private bool showModal = false;

    //Variables for labels in modal headers
    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    //Variable for storing and displaying error from request
    private string errorMessage = string.Empty;

    //Variable for enabling and disabling of fields or buttons
    private bool disableEdit = false;

    //Variable for identifying if the transction is Add or Edit
    private bool isAdd = false;

    //Variable for storing the data that is displayed in fields
    private Role roleInfo = new Role();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> RoleInfoResponse { get; set; }
    #endregion

    public async Task InitializeRole(Guid roleID)
    {
        //Check if the transaction is add or edit
        isAdd = roleID == Guid.Empty;

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_ROLE_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   roleID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        roleInfo = JsonConvert.DeserializeObject<Role>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        disableEdit = roleInfo.Status != Constants.STATUS_ENABLED_INT;
    }

    private async Task Save()
    {
        roleInfo.Name = roleInfo.Name == null ? string.Empty : roleInfo.Name.ToUpper();
        //Prepare Request for Save
        var request = new SaveRoleRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_ROLE_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_ROLE_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputRole = roleInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_ROLE, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }

        Reset(false);
        await RoleInfoResponse.InvokeAsync(response);
    }

    private async Task Cancel()
    {
        Reset(false);
        await RoleInfoResponse.InvokeAsync(null);
    }

    private void Reset(bool isModalShow)
    {
        //Display or Hide modal
        showModal = isModalShow;
        //Reset
        disableEdit = false;
        errorMessage = string.Empty;
        roleInfo = new Role();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_ROLE);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_ROLE);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }

    private void CheckBoxClick(System.Reflection.PropertyInfo property, PermissionType type)
    {
        var permission = property.GetValue(roleInfo);
        if (permission == null)
            return;

        var newPermission = Utility.IsPermitted((int)permission, type) ? (int)permission - (int)type : 
                                                                         (int)permission + (int)type;
        property.SetValue(roleInfo, newPermission);
    }
}
