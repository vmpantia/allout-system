@inject IHTTPService _http


<ModalInfo @ref="modalInfo"
           ModalIcon="@icon" ModalTitle="@title" ModalDescription="@description"
           SaveButtonClicked="SaveButtonClicked"
           CancelButtonClicked="CancelButtonClicked">
    <Fields>
        <TextBox Label="Name" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@roleInfo.Name" />
        <div class="mb-3">
            <label for="table" class="form-label">Permissions</label>
            <table class="cstm-table" id="table">
                <thead>
                    <tr>
                        <th>Permission</th>
                        <th>Add</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var properties = roleInfo.GetType().GetProperties();

                        foreach (var property in properties)
                        {
                            if (property.Name.Contains(Constants.PROP_PERMISSION))
                            {
                                var name = property.Name.Replace(Constants.PROP_PERMISSION, string.Empty);
                                var permission = property.GetValue(roleInfo);
                                if (permission == null)
                                    return;

                                <tr>
                                    <td>@name</td>
                                    <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" disabled="@(!modalInfo.ControlEnableState)" checked="@Utility.IsPermitted((int)permission, PermissionType.ADD)" @onclick="() => CheckBoxClicked(property, PermissionType.ADD)"></td>
                                    <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" disabled="@(!modalInfo.ControlEnableState)" checked="@Utility.IsPermitted((int)permission, PermissionType.EDIT)" @onclick="() => CheckBoxClicked(property, PermissionType.EDIT)"></td>
                                    <td class="@Constants.CSS_COLUMN_CHECKBOX"><input class="form-check-input" type="checkbox" disabled="@(!modalInfo.ControlEnableState)" checked="@Utility.IsPermitted((int)permission, PermissionType.DELETE)" @onclick="() => CheckBoxClicked(property, PermissionType.DELETE)"></td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </Fields>
</ModalInfo>

@code {
    #region Variable(s)
    private ModalInfo? modalInfo;

    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private bool isAdd = false;

    private Role roleInfo = new Role();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> RoleInfoResponse { get; set; }
    #endregion

    public async Task InitializeRole(Guid roleID)
    {
        //Check if the transaction is add or edit
        isAdd = roleID == Guid.Empty;

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_ROLE_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   roleID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        roleInfo = JsonConvert.DeserializeObject<Role>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        if (modalInfo != null)
            modalInfo.ControlEnableState = roleInfo.Status == Constants.STATUS_ENABLED_INT;
    }

    #region Event Handler Functions
    private async Task SaveButtonClicked()
    {
        roleInfo.Name = roleInfo.Name == null ? string.Empty : roleInfo.Name.ToUpper();
        //Prepare Request for Save
        var request = new SaveRoleRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_ROLE_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_ROLE_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputRole = roleInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_ROLE, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }

        Reset(false);
        await RoleInfoResponse.InvokeAsync(response);
    }

    private async Task CancelButtonClicked()
    {
        Reset(false);
        await RoleInfoResponse.InvokeAsync(null);
    }
    #endregion

    #region Common Functions
    private void Reset(bool isModalShow)
    {
        if (modalInfo != null)
        {
            modalInfo.ModalVisibleState = isModalShow;
            modalInfo.ControlEnableState = true;
            modalInfo.ErrorMessageValue = string.Empty;
        }
        //Reset
        roleInfo = new Role();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_ROLE);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_ROLE);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }

    private void CheckBoxClicked(System.Reflection.PropertyInfo property, PermissionType type)
    {
        var permission = property.GetValue(roleInfo);
        if (permission == null)
            return;

        var newPermission = Utility.IsPermitted((int)permission, type) ? (int)permission - (int)type : 
                                                                         (int)permission + (int)type;
        property.SetValue(roleInfo, newPermission);
    }
    #endregion
}
