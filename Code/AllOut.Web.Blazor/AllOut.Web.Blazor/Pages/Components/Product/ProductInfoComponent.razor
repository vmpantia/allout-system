@inject IHTTPService _http

<ModalInfo @ref="modalInfo"
           ModalIcon="@icon" ModalTitle="@title" ModalDescription="@description"
           SaveButtonClicked="SaveButtonClicked"
           CancelButtonClicked="CancelButtonClicked">
    <Fields>
        <TextBox Label="Name" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@productInfo.Name" />
        <ComboBox Label="Brand" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@productInfo.BrandID"
                  DataSource="@brandList" ValueMember="BrandID" DisplayMember="Name" />
        <ComboBox Label="Category" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@productInfo.CategoryID"
                  DataSource="@categoryList" ValueMember="CategoryID" DisplayMember="Name" />
        <TextArea Label="Description" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@productInfo.Description" />
    </Fields>
</ModalInfo>

@code {
    #region Variable(s)
    private ModalInfo? modalInfo;

    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private bool isAdd = false;

    private Product productInfo = new Product();

    private List<Brand> brandList = new List<Brand>();
    private List<Category> categoryList = new List<Category>();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> ProductInfoResponse { get; set; }
    #endregion

    public async Task InitializeProduct(Guid productID)
    {
        //Check if the transaction is add or edit
        isAdd = productID == Guid.Empty;

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        await PopulateBrands();
        await PopulateCategories();

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_PRODUCT_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   productID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        productInfo = JsonConvert.DeserializeObject<Product>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        if (modalInfo != null)
            modalInfo.ControlEnableState = productInfo.Status == Constants.STATUS_ENABLED_INT;
    }

    #region Event Handler Functions
    private async Task SaveButtonClicked()
    {
        productInfo.Name = productInfo.Name == null ? string.Empty : productInfo.Name.ToUpper();
        productInfo.Description = productInfo.Description == null ? string.Empty : productInfo.Description.ToUpper();
        //Prepare Request for Save
        var request = new SaveProductRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_PRODUCT_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_PRODUCT_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputProduct = productInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_PRODUCT, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }

        Reset(false);
        await ProductInfoResponse.InvokeAsync(response);
    }

    private async Task CancelButtonClicked()
    {
        Reset(false);
        await ProductInfoResponse.InvokeAsync(null);
    }
    #endregion

    #region Common Functions
    private async Task PopulateBrands()
    {
        var response = await _http.GetRequestAsync(Globals.GET_BRANDS_BY_STATUS,
                                                   Globals.ClientInformation.ClientID,
                                                   Constants.STATUS_ENABLED_INT);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        brandList = JsonConvert.DeserializeObject<List<Brand>>(response.Data)!;
    }

    private async Task PopulateCategories()
    {
        var response = await _http.GetRequestAsync(Globals.GET_CATEGORIES_BY_STATUS,
                                                   Globals.ClientInformation.ClientID,
                                                   Constants.STATUS_ENABLED_INT);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        categoryList = JsonConvert.DeserializeObject<List<Category>>(response.Data)!;
    }

    private void Reset(bool isModalShow)
    {
        if (modalInfo != null)
        {
            modalInfo.ModalVisibleState = isModalShow;
            modalInfo.ControlEnableState = true;
            modalInfo.ErrorMessageValue = string.Empty;
        }
        //Reset
        productInfo = new Product();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_PRODUCT);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_PRODUCT);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
    #endregion
}
