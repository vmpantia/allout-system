@inject IHTTPService _http

@if (showModal)
{
    <!-- Modal -->
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <Title Icon="@icon"
                       Name="@title"
                       Description="@description"></Title>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <input type="text" class="form-control" id="name" disabled="@disableEdit" @bind="productInfo.Name">
                    </div>
                    <div class="mb-3">
                        <label for="brands" class="form-label">Brand:</label>
                        <select type="text" class="form-control" id="brands" disabled="@disableEdit" @bind="productInfo.BrandID">
                            <option value="@Guid.Empty">Select Brand</option>
                            @foreach (var brand in brandList)
                            {
                                <option value="@brand.BrandID">@brand.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="brands" class="form-label">Category:</label>
                        <select type="text" class="form-control" id="categories" disabled="@disableEdit" @bind="productInfo.CategoryID">
                            <option value="@Guid.Empty">Select Category</option>
                            @foreach (var category in categoryList)
                            {
                                <option value="@category.CategoryID">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="desc" class="form-label">Description</label>
                        <textarea class="form-control" id="desc" disabled="@disableEdit" rows="4" @bind="productInfo.Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-sm" disabled="@disableEdit" @onclick="() => Save()">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                        Save
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Cancel()">
                        <span class="oi oi-x" aria-hidden="true"></span>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    //Variable for Displaying and Hiding a Modal
    private bool showModal = false;

    private Product productInfo = new Product();
    private List<Brand> brandList = new List<Brand>();
    private List<Category> categoryList = new List<Category>();

    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private string errorMessage = string.Empty;

    private bool disableEdit = false;

    [Parameter]
    public EventCallback<Response> ProductInfoResponse { get; set; }

    public async Task InitializeProduct(Guid productID)
    {
        showModal = true;
        ResetData();
        StateHasChanged();

        var isAdd = productID == Guid.Empty;
        SetTitle(isAdd);

        await PopuplateBrands();
        await PopuplateCategories();

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_PRODUCT_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   productID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        productInfo = JsonConvert.DeserializeObject<Product>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        disableEdit = productInfo.Status != Constants.STATUS_ENABLED_INT;
    }

    private async Task PopuplateBrands()
    {
        var response = await _http.GetRequestAsync(Globals.GET_BRANDS_BY_STATUS,
                                                   Globals.ClientInformation.ClientID,
                                                   Constants.STATUS_ENABLED_INT);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        brandList = JsonConvert.DeserializeObject<List<Brand>>(response.Data)!;
    }

    private async Task PopuplateCategories()
    {
        var response = await _http.GetRequestAsync(Globals.GET_CATEGORIES_BY_STATUS,
                                                   Globals.ClientInformation.ClientID,
                                                   Constants.STATUS_ENABLED_INT);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        categoryList = JsonConvert.DeserializeObject<List<Category>>(response.Data)!;
    }

    private async Task Save()
    {
        var isAdd = productInfo.ProductID == Guid.Empty ? true : false;

        productInfo.Name = productInfo.Name == null ? string.Empty : productInfo.Name.ToUpper();
        productInfo.Description = productInfo.Description == null ? string.Empty : productInfo.Description.ToUpper();
        productInfo.Status = Constants.STATUS_ENABLED_INT;

        //Prepare Request for Save
        var request = new SaveProductRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_PRODUCT_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_PRODUCT_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputProduct = productInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_PRODUCT, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }

        showModal = false;
        ResetData();
        await ProductInfoResponse.InvokeAsync(response);
    }

    private void Cancel()
    {
        showModal = false;
        ResetData();
        ProductInfoResponse.InvokeAsync(null);
    }

    private void ResetData()
    {
        //Reset
        disableEdit = false;
        errorMessage = string.Empty;
        productInfo = new Product();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_PRODUCT);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_PRODUCT);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
}
