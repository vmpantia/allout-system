@inject IHTTPService _http

@if (showModal)
{
    <!-- Modal -->
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <Title Icon="@icon"
                       Name="@title"
                       Description="@description"></Title>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="name" disabled="@disableEdit" @bind="brandInfo.Name">
                    </div>
                    <div class="mb-3">
                        <label for="desc" class="form-label">Description</label>
                        <textarea class="form-control" id="desc" disabled="@disableEdit" rows="4" @bind="brandInfo.Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-sm" disabled="@disableEdit" @onclick="() => Save()">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                        Save
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Cancel()">
                        <span class="oi oi-x" aria-hidden="true"></span>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    //Variable for Displaying and Hiding a Modal
    private bool showModal = false;

    private Brand brandInfo = new Brand();

    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private string errorMessage = string.Empty;

    private bool disableEdit = false;

    [Parameter]
    public EventCallback<Response> BrandInfoResponse { get; set; }

    public async Task InitializeBrand(Guid brandID)
    {
        showModal = true;
        ResetData();
        StateHasChanged();

        var isAdd = brandID == Guid.Empty;
        SetTitle(isAdd);

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_BRAND_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   brandID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        brandInfo = JsonConvert.DeserializeObject<Brand>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        disableEdit = brandInfo.Status != Constants.STATUS_ENABLED_INT;
    }

    private async Task Save()
    {
        var isAdd = brandInfo.BrandID == Guid.Empty ? true : false;

        brandInfo.Name = brandInfo.Name == null ? string.Empty : brandInfo.Name.ToUpper();
        brandInfo.Description = brandInfo.Description == null ? string.Empty : brandInfo.Description.ToUpper();
        brandInfo.Status = Constants.STATUS_ENABLED_INT;

        //Prepare Request for Save
        var request = new SaveBrandRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_BRAND_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_BRAND_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputBrand = brandInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_BRAND, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }

        showModal = false;
        ResetData();
        await BrandInfoResponse.InvokeAsync(response);
    }

    private void Cancel()
    {
        showModal = false;
        ResetData();
        BrandInfoResponse.InvokeAsync(null);
    }

    private void ResetData()
    {
        //Reset
        disableEdit = false;
        errorMessage = string.Empty;
        brandInfo = new Brand();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_BRAND);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_BRAND);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
}
