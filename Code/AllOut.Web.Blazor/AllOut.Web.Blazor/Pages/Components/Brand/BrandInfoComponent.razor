@inject IHTTPService _http

<ModalInfo @ref="modalInfo" 
        ModalIcon="@icon" ModalTitle="@title" ModalDescription="@description"
        SaveButtonClicked="SaveButtonClicked"
        CancelButtonClicked="CancelButtonClicked">
    <Fields>
        <TextBox Label="Name" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@brandInfo.Name" />
        <TextArea Label="Description" ControlEnableState="@modalInfo.ControlEnableState" @bind-BindingValue="@brandInfo.Description" />
    </Fields>
</ModalInfo>

@code {
    #region Variable(s)
    private ModalInfo? modalInfo;
     
    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    private bool isAdd = false;

    private Brand brandInfo = new Brand();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> BrandInfoResponse { get; set; }
    #endregion

    public async Task InitializeBrand(Guid brandID)
    {
        //Check if the transaction is add or edit
        isAdd = brandID == Guid.Empty;

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_BRAND_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   brandID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }
        brandInfo = JsonConvert.DeserializeObject<Brand>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        if (modalInfo != null)
            modalInfo.ControlEnableState = brandInfo.Status == Constants.STATUS_ENABLED_INT;
    }

    #region Event Handler Functions
    private async Task SaveButtonClicked()
    {
        brandInfo.Name = brandInfo.Name == null ? string.Empty : brandInfo.Name.ToUpper();
        brandInfo.Description = brandInfo.Description == null ? string.Empty : brandInfo.Description.ToUpper();
        //Prepare Request for Save
        var request = new SaveBrandRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_BRAND_BY_ADMIN :
                                         Constants.FUNCTION_ID_CHANGE_BRAND_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputBrand = brandInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_BRAND, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            if (modalInfo != null)
                modalInfo.ErrorMessageValue = response.Data;
            return;
        }

        Reset(false);
        await BrandInfoResponse.InvokeAsync(response);
    }

    private async Task CancelButtonClicked()
    {
        Reset(false);
        await BrandInfoResponse.InvokeAsync(null);
    }
    #endregion

    #region Common Functions
    private void Reset(bool isModalShow)
    {
        if(modalInfo != null)
        {
            modalInfo.ModalVisibleState = isModalShow;
            modalInfo.ControlEnableState = true;
            modalInfo.ErrorMessageValue = string.Empty;
        }
        //Reset
        brandInfo = new Brand();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_BRAND);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_BRAND);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
    #endregion
}
