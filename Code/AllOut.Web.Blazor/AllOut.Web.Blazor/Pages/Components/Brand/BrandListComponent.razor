@page "/Brand"
@inject IHTTPService _http
<Title Icon="oi oi-tag"
       Name="Brand"
       Description="In this page you can view all the Brand that is saved in the system."></Title>


@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-success" role="alert">
        @responseMessage
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@*Brand Action Buttons*@
<div class="cstm-actions">
    <div class="buttons">
        <button type="button" @onclick="() => ShowInfo()">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Add
        </button>
        <button type="button" disabled="@isDisableOtherButtons" @onclick="() => EnableBrands()">
            <span class="oi oi-chevron-top" aria-hidden="true"></span>
            Enable
        </button>
        <button type="button" disabled="@isDisableOtherButtons" @onclick="() => DisableBrands()">
            <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            Disable
        </button>
        <button type="button" disabled="@isDisableOtherButtons" @onclick="() => DeleteBrands()">
            <span class="oi oi-trash" aria-hidden="true"></span>
            Delete
        </button>
    </div>
    <div class="search">
        <input type="text" placeholder="Search Brand" @oninput="SearchChange" />
    </div>
</div>

@*Brand List*@
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th class="cstm-column-action">
                <input class="form-check-input" type="checkbox" checked="@isSelectAll" @onchange="SelectAllChange">
            </th>
            <th class="cstm-column-action">Action</th>
            <th>Name</th>
            <th>Description</th>
            <th>Status</th>
            <th>Created Date</th>
            <th>Modified Date</th>
        </tr>
    </thead>
    <tbody>
        @if (brandList.Count == 0)
        {
            <tr>
                <td colspan="7">
                    <div class="cstm-no-records">
                        @Constants.ERROR_NO_RECORDS
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var brand in brandList)
            {
                <tr>
                    <td class="cstm-column-action">
                        <input class="form-check-input" type="checkbox" checked="@brand.isSelect" @onclick="() => Select(brand)">
                    </td>
                    <td class="cstm-column-action">
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowInfo(brand.BrandID)">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                            Edit
                        </button>
                    </td>
                    <td>@brand.Name</td>
                    <td>@brand.Description</td>

                    @*Status Column*@
                    @if (brand.Status == Constants.STATUS_ENABLED_INT)
                    {
                        <td><span class="badge bg-success">@Utility.ConvertStatusToString(brand.Status)</span></td>
                    }
                    else
                    {
                        <td><span class="badge bg-secondary">@Utility.ConvertStatusToString(brand.Status)</span></td>
                    }

                    <td>@DateTime.Parse(brand.CreatedDate.ToString()).ToString(Constants.DATE_FORMAT)</td>

                    @*Modified Date Column*@
                    @if(brand.ModifiedDate == null) {
                        <td>@Constants.NA</td>
                    }
                    else {
                        <td>@DateTime.Parse(brand.ModifiedDate.ToString()).ToString(Constants.DATE_FORMAT)</td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

<BrandInfoComponent @ref="brandInfo" BrandInfoResponse="GetResponse"></BrandInfoComponent>

@code {
    private string errorMessage { get; set; } = string.Empty;
    private string responseMessage { get; set; } = string.Empty;

    private bool isSelectAll = false;
    private bool isDisableOtherButtons = true;

    private BrandInfoComponent? brandInfo { get; set; }

    private List<Brand> brandList { get; set; } = new List<Brand>();
    private List<Guid> brandIDs { get; set; } = new List<Guid>();

    protected override void OnInitialized()
    {
        PopulateBrands();
    }

    private void SearchChange(ChangeEventArgs e)
    {
        var query = string.Empty;
        if (e.Value != null)
            query = (string)e.Value;

        PopulateBrands(query);
    }

    private void SelectAllChange(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;

        SelectAll((bool)e.Value);
    }

    private void SelectAll(bool value)
    {
        foreach (var brand in brandList)
        {
            brand.isSelect = value;
        }

        isDisableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private void Select(Brand brand)
    {
        brand.isSelect = !brand.isSelect;

        isDisableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private void PopulateBrands(string query = null)
    {
        ResetData();

        Response response;
        if (string.IsNullOrEmpty(query))
            response = _http.GetBrands(Globals.TEMP_CLIENT_ID);
        else
            response = _http.GetBrandsByQuery(Globals.TEMP_CLIENT_ID, query);

        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = (string)response.Data;
            return;
        }

        brandList = (List<Brand>)response.Data;

        isDisableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private void EnableBrands()
    {
        UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_ENABLED_INT);
    }

    private void DisableBrands()
    {
        UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_DISABLED_INT);
    }

    private void DeleteBrands()
    {
        UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_DELETE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_POST_DELETE, Constants.STATUS_DELETION_INT);
    }

    private void UpdateStatusByIDs(string functionID, string requestStatus, int newStatus)
    {
        var request = new UpdateStatusByGUIDsRequest
            {
                FunctionID = functionID,
                RequestStatus = requestStatus,
                client = Globals.TEMP_CLIENT,
                IDs = brandList.Where(data => data.isSelect)
                               .Select(data => data.BrandID)
                               .ToList(),
                newStatus = newStatus
            };

        var response = _http.PostUpdateBrandStatusByIDs(request);

        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = (string)response.Data;
            return;
        }
        PopulateBrands();
        responseMessage = (string)response.Data;
    }

    private void ResetData()
    {
        brandList = new List<Brand>();
        brandIDs = new List<Guid>();
        isSelectAll = false;
        errorMessage = string.Empty;
        responseMessage = string.Empty;
    }

    private void ShowInfo(Guid? id = null)
    {
        SelectAll(false);
        responseMessage = string.Empty;

        if (brandInfo == null)
            return;

        brandInfo.InitializeBrand(id);
    }

    private void GetResponse(Response res)
    {
        if(res != null && res.Result == ResponseResult.SUCCESS)
        {
            responseMessage = (string)res.Data;
            PopulateBrands();
        }
    }
}
