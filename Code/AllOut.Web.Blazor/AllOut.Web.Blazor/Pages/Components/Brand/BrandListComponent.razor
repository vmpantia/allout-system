@page "/Brand"
@inject IHTTPService _http
@inject IToastService _toast

<Title Icon="oi oi-tag"
       Name="Brand"
       Description="In this page you can view all the Brand that is saved in the system."></Title>

@*Brand Action Buttons*@
<div class="cstm-actions">
    <div class="buttons">
        <button type="button" @onclick="() => ShowInfo()">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Add
        </button>
        <button type="button" disabled="@disableOtherButtons" @onclick="() => EnableBrands()">
            <span class="oi oi-chevron-top" aria-hidden="true"></span>
            Enable
        </button>
        <button type="button" disabled="@disableOtherButtons" @onclick="() => DisableBrands()">
            <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            Disable
        </button>
        <button type="button" disabled="@disableOtherButtons" @onclick="() => DeleteBrands()">
            <span class="oi oi-trash" aria-hidden="true"></span>
            Delete
        </button>
    </div>
    <div class="search">
        <input type="text" placeholder="Search Brand" @oninput="SearchChange" />
    </div>
</div>

@*Brand List*@
<table class="cstm-table">
    <thead>
        <tr>
            @*Select Checkbox*@
            <th class="cstm-column-checkbox">
                <input class="form-check-input" type="checkbox" checked="@selectAll" @onclick="() => SelectAllChange()">
            </th>
            <th class="cstm-column-button">Action</th>
            <th>Name</th>
            <th>Description</th>
            <th class="cstm-column-status">Status</th>
            <th class="cstm-column-date">Created Date</th>
            <th class="cstm-column-date">Modified Date</th>
        </tr>
    </thead>
    <tbody>
        @if (brandList.Count == 0)
        {
            <tr>
                <td colspan="7">
                    <div class="cstm-no-records">
                        @Constants.ERROR_NO_RECORDS
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var brand in brandList)
            {
                <tr>
                    <td class="cstm-column-checkbox">
                        <input class="form-check-input" type="checkbox" checked="@brand.isSelect" @onclick="() => Select(brand)">
                    </td>
                    <td class="cstm-column-button">
                        <button class="cstm-table-button-edit" title="Edit" @onclick="() => ShowInfo(brand.BrandID)">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                    </td>
                    <td>@brand.Name</td>
                    <td>@brand.Description</td>
                    @*Status Column*@
                    <td class="cstm-column-status">
                        <span class="cstm-badge-@Utility.ConvertStatusToString(brand.Status)">
                        @Utility.ConvertStatusToString(brand.Status)
                        </span>
                    </td>
                    <td class="cstm-column-date">@brand.CreatedDate.ToString(Constants.DATE_FORMAT)</td>
                    @*Modified Date Column*@
                    <td class ="cstm-column-date">
                        @if(brand.ModifiedDate == null) {
                            @Constants.NA
                        }
                        else {
                            @(((DateTime)brand.ModifiedDate).ToString(Constants.DATE_FORMAT))
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<BrandInfoComponent @ref="brandInfo" BrandInfoResponse="GetResponse"></BrandInfoComponent>

@code {
    private bool selectAll = false;
    private bool disableOtherButtons = true;
    private BrandInfoComponent? brandInfo;
    private List<Brand> brandList = new List<Brand>();

    protected override async Task OnInitializedAsync()
    {
        await PopulateBrands();
    }

    private async Task PopulateBrands(string? query = null)
    {
        ResetData();

        Response response;
        if (string.IsNullOrEmpty(query))
            response = await _http.GetRequestAsync(Globals.GET_BRANDS, Globals.ClientInformation.ClientID);
        else
            response = await _http.GetRequestAsync(Globals.GET_BRANDS_BY_QUERY, Globals.ClientInformation.ClientID, query);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }

        brandList = JsonConvert.DeserializeObject<List<Brand>>(response.Data)!;
        disableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private async Task SearchChange(ChangeEventArgs e)
    {
        var query = string.Empty;
        if (e.Value != null)
            query = (string)e.Value;

        await PopulateBrands(query);
    }

    private async Task EnableBrands()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_ENABLED_INT);
    }

    private async Task DisableBrands()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_DISABLED_INT);
    }

    private async Task DeleteBrands()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_DELETE_BRAND_BY_ADMIN, Constants.REQUEST_STATUS_POST_DELETE, Constants.STATUS_DELETION_INT);
    }

    private async Task UpdateStatusByIDs(string functionID, string requestStatus, int newStatus)
    {
        var request = new UpdateStatusByGUIDsRequest
            {
                FunctionID = functionID,
                RequestStatus = requestStatus,
                client = Globals.ClientInformation,
                IDs = brandList.Where(data => data.isSelect)
                               .Select(data => data.BrandID)
                               .ToList(),
                newStatus = newStatus
            };

        var response = await _http.PostRequestAsync(Globals.POST_UPDATE_BRAND_STATUS_BY_IDS, request);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }
        await PopulateBrands();
        _toast.ShowSuccess(response.Data);
    }

    private void SelectAllChange()
    {
        selectAll = !selectAll;
        SelectAll(selectAll);
    }

    private void SelectAll(bool value)
    {
        foreach (var brand in brandList)
        {
            brand.isSelect = value;
        }

        disableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private void Select(Brand brand)
    {
        brand.isSelect = !brand.isSelect;

        disableOtherButtons = brandList.Where(data => data.isSelect).Count() == 0;
    }

    private void ResetData()
    {
        selectAll = false;
    }

    private async Task ShowInfo(Guid? id = null)
    {
        ResetData();
        SelectAll(false);

        if (brandInfo == null)
            return;

        await brandInfo.InitializeBrand(id);
    }

    private async Task GetResponse(Response res)
    {
        if(res != null && res.Result == ResponseResult.SUCCESS)
        {
            await PopulateBrands();
            _toast.ShowSuccess(res.Data);
        }
    }
}
