@page "/Brand"
@inject IHTTPService _http
<Title Icon="oi oi-tag"
       Name="Brand"
       Description="In this page you can view all the Brand that is saved in the system."></Title>
       
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Select</th>
            <th>Action</th>
            <th>Name</th>
            <th>Description</th>
            <th>Status</th>
            <th>Created Date</th>
            <th>Modified Date</th>
        </tr>
    </thead>
    <tbody>
        @if (brandList == null || brandList.Count == 0)
        {
            <tr>
                <td colspan="5">
                    <div class="cstm-no-records">
                        No Records Found in the Database
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var brand in brandList)
            {
                <tr>
                    <td>
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                    </td>
                    <td>
                        <a>Edit</a>
                    </td>
                    <td>@brand.Name</td>
                    <td>@brand.Description</td>

                    @*Status Column*@
                    @if (brand.Status == Constants.STATUS_ENABLED_INT)
                    {
                        <td><span class="badge bg-success">@Utility.ConvertStatusToString(brand.Status)</span></td>
                    }
                    else
                    {
                        <td><span class="badge bg-secondary">@Utility.ConvertStatusToString(brand.Status)</span></td>
                    }

                    <td>@DateTime.Parse(brand.CreatedDate.ToString()).ToString(Constants.DATE_FORMAT)</td>

                    @*Modified Date Column*@
                    @if(brand.ModifiedDate == null) {
                        <td>@Constants.NA</td>
                    }
                    else {
                        <td>@DateTime.Parse(brand.ModifiedDate.ToString()).ToString(Constants.DATE_FORMAT)</td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@code {

    private List<Brand> brandList { get; set; }

    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await _http.GetBrandsAsync(Globals.TEMP_CLIENT_ID);

        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = (string)response.Data;
            return;
        }

        brandList = (List<Brand>)response.Data;
    }

}
