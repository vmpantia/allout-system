@inject IHTTPService _http

@if (showModal)
{
    <!-- Modal -->
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <Title Icon="@icon"
                       Name="@title"
                       Description="@description"></Title>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="name" disabled="@disableEdit" @bind="categoryInfo.Name">
                    </div>
                    <div class="mb-3">
                        <label for="desc" class="form-label">Description</label>
                        <textarea class="form-control" id="desc" disabled="@disableEdit" rows="4" @bind="categoryInfo.Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary btn-sm" disabled="@disableEdit" @onclick="() => Save()">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                        Save
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="() => Cancel()">
                        <span class="oi oi-x" aria-hidden="true"></span>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    #region Variable(s)
    //Variable for showing and hiding modal
    private bool showModal = false;

    //Variables for labels in modal headers
    private string icon = string.Empty;
    private string title = string.Empty;
    private string description = string.Empty;

    //Variable for storing and displaying error from request
    private string errorMessage = string.Empty;

    //Variable for enabling and disabling of fields or buttons
    private bool disableEdit = false;

    //Variable for identifying if the transction is Add or Edit
    private bool isAdd = false;

    //Variable for storing the data that is displayed in fields
    private Category categoryInfo = new Category();
    #endregion

    #region Event Handler(s) of Components
    [Parameter]
    public EventCallback<Response> CategoryInfoResponse { get; set; }
    #endregion

    public async Task InitializeCategory(Guid categoryID)
    {
        //Check if the transaction is add or edit
        isAdd = categoryID == Guid.Empty;

        StateHasChanged();

        Reset(true);
        SetTitle(isAdd);

        if (isAdd)
            return;

        //Edit Data
        var response = await _http.GetRequestAsync(Globals.GET_CATEGORY_BY_ID,
                                                   Globals.ClientInformation.ClientID,
                                                   categoryID);
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }
        categoryInfo = JsonConvert.DeserializeObject<Category>(response.Data)!;
        //Not able to Edit information once the status is NOT Enabled
        disableEdit = categoryInfo.Status != Constants.STATUS_ENABLED_INT;
    }

    private async Task Save()
    {
        categoryInfo.Name = categoryInfo.Name == null ? string.Empty : categoryInfo.Name.ToUpper();
        categoryInfo.Description = categoryInfo.Description == null ? string.Empty : categoryInfo.Description.ToUpper();
        //Prepare Request for Save
        var request = new SaveCategoryRequest
            {
                FunctionID = isAdd ? Constants.FUNCTION_ID_ADD_CATEGORY_BY_ADMIN :
                                     Constants.FUNCTION_ID_CHANGE_CATEGORY_BY_ADMIN,
                RequestStatus = Constants.REQUEST_STATUS_COMPLETED,
                client = Globals.ClientInformation,
                inputCategory = categoryInfo
            };

        //Send Request for Save
        var response = await _http.PostRequestAsync(Globals.POST_SAVE_CATEGORY, request);

        //Check Response Result
        if (response.Result != ResponseResult.SUCCESS)
        {
            errorMessage = response.Data;
            return;
        }

        Reset(false);
        await CategoryInfoResponse.InvokeAsync(response);
    }

    private async Task Cancel()
    {
        Reset(false);
        await CategoryInfoResponse.InvokeAsync(null);
    }

    private void Reset(bool isModalShow)
    {
        //Display or Hide modal
        showModal = isModalShow;
        //Reset
        disableEdit = false;
        errorMessage = string.Empty;
        categoryInfo = new Category();
    }

    private void SetTitle(bool isAdd)
    {
        title = string.Format(isAdd ? Constants.TITLE_ADD : Constants.TITLE_EDIT, Constants.OBJECT_CATEGORY);
        description = string.Format(isAdd ? Constants.DESC_ADD : Constants.DESC_EDIT, Constants.OBJECT_CATEGORY);
        icon = isAdd ? Constants.OI_PLUS : Constants.OI_PENCIL;
    }
}
