@page "/Category"
@inject IHTTPService _http
@inject IToastService _toast

<Loader Show="@showLoader"></Loader>

<Title Icon="oi oi-target"
       Name="Category"
       Description="In this page you can view all the Category that is saved in the system."></Title>

@*Category Action Buttons*@
<div class="cstm-actions">
    <div class="buttons">
        <button type="button" @onclick="() => ShowInfo()">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Add
        </button>
        <button type="button" disabled="@statusButtons" @onclick="() => EnableCategories()">
            <span class="oi oi-chevron-top" aria-hidden="true"></span>
            Enable
        </button>
        <button type="button" disabled="@statusButtons" @onclick="() => DisableCategories()">
            <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
            Disable
        </button>
        <button type="button" disabled="@statusButtons" @onclick="() => DeleteCategories()">
            <span class="oi oi-trash" aria-hidden="true"></span>
            Delete
        </button>
    </div>
    <div class="search">
        <input type="text" placeholder="Search Category" @oninput="SearchChange" />
    </div>
</div>

<Table DataSource="categoryList" TItem="Category" ColumnCount="7">
    <Columns>
        <Column Name="Select" CheckBoxHeader="true" CheckBoxValue="@selectAllValue" CheckBoxStateChanged="SelectAllChanged">
            <input class="form-check-input" type="checkbox" checked="@context.isSelect"
                   @onclick="() => Select(context)">
        </Column>
        <Column Name="Name" Label="Name" />
        <Column Name="Description" Label="Description" />
        <Column Name="Status" Label="Status" />
        <Column Name="CreatedDate" Label="Created Date" />
        <Column Name="ModifiedDate" Label="Modified Date" />
        <Column Name="Action" Label="Action">
            <button class="cstm-table-button" title="Edit"
                    @onclick="() => ShowInfo(context.CategoryID)">
                <span class="oi oi-pencil" aria-hidden="true"></span>
            </button>
        </Column>
    </Columns>
</Table>

<CategoryInfoComponent @ref="categoryInfo" CategoryInfoResponse="GetResponse"></CategoryInfoComponent>

@code {
    private bool showLoader = false;
    private bool selectAllValue = false;
    private bool statusButtons = true;

    private CategoryInfoComponent? categoryInfo;
    private List<Category> categoryList = new List<Category>();

    #region Event Handler Functions
    protected override async Task OnInitializedAsync()
    {
        showLoader = true;
        //Delay Process for .5 second
        await Task.Delay(Constants.DELAY_PROCESS);
        await PopulateCategories();
        showLoader = false;
    }

    private async Task SearchChange(ChangeEventArgs e)
    {
        var query = string.Empty;
        if (e.Value != null)
            query = (string)e.Value;

        await PopulateCategories(query);
    }

    private async Task EnableCategories()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_CATEGORY_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_ENABLED_INT);
    }

    private async Task DisableCategories()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_CHANGE_CATEGORY_BY_ADMIN, Constants.REQUEST_STATUS_COMPLETED, Constants.STATUS_DISABLED_INT);
    }

    private async Task DeleteCategories()
    {
        await UpdateStatusByIDs(Constants.FUNCTION_ID_BULK_DELETE_CATEGORY_BY_ADMIN, Constants.REQUEST_STATUS_POST_DELETE, Constants.STATUS_DELETION_INT);
    }

    private async Task ShowInfo(Guid? id = null)
    {
        SelectAllChanged(false);

        if (categoryInfo == null)
            return;

        await categoryInfo.InitializeCategory(id);
    }

    private async Task GetResponse(Response res)
    {
        if (res != null && res.Result == ResponseResult.SUCCESS)
        {
            await PopulateCategories();
            _toast.ShowSuccess(res.Data);
        }
    }

    private void Select(Category category)
    {
        category.isSelect = !category.isSelect;
        EnableStatusButtons();
    }

    private void SelectAllChanged(bool value)
    {
        selectAllValue = value;
        foreach (var category in categoryList)
        {
            category.isSelect = value;
        }
        EnableStatusButtons();
    }
    #endregion

    #region Common Functions
    private async Task PopulateCategories(string? query = null)
    {
        selectAllValue = false;

        Response response;
        if (string.IsNullOrEmpty(query))
            response = await _http.GetRequestAsync(Globals.GET_CATEGORIES, Globals.ClientInformation.ClientID);
        else
            response = await _http.GetRequestAsync(Globals.GET_CATEGORIES_BY_QUERY, Globals.ClientInformation.ClientID, query);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }

        categoryList = JsonConvert.DeserializeObject<List<Category>>(response.Data)!;
        EnableStatusButtons();
    }

    private async Task UpdateStatusByIDs(string functionID, string requestStatus, int newStatus)
    {
        var request = new UpdateStatusByGUIDsRequest
            {
                FunctionID = functionID,
                RequestStatus = requestStatus,
                client = Globals.ClientInformation,
                IDs = categoryList.Where(data => data.isSelect)
                                   .Select(data => data.CategoryID)
                                   .ToList(),
                newStatus = newStatus
            };

        var response = await _http.PostRequestAsync(Globals.POST_UPDATE_CATEGORY_STATUS_BY_IDS, request);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }
        await PopulateCategories();
        _toast.ShowSuccess(response.Data);
    }

    private void EnableStatusButtons()
    {
        statusButtons = categoryList.Where(data => data.isSelect).Count() == 0;
    }
    #endregion
}
