@page "/Category"
@inject IHTTPService _http
@inject IToastService _toast

<Loader Show="@showLoader"></Loader>

<CategoryInfoComponent @ref="categoryInfo" CategoryInfoResponse="CategoryInfoResponse"></CategoryInfoComponent>

<Title Icon="oi oi-target"
       Name="Category"
       Description="In this page you can view all the Category that is saved in the system."></Title>

<Actions StatusButtonValue="@statusButtons"
         AddButtonClicked="InitializeCategory"
         StatusButtonsClicked="StatusButtonsClicked"
         SearchValueChanged="SearchValueChanged" />

<Table DataSource="categoryList" TItem="Category" ColumnCount="7" Pagination="true">
    <Columns>
        <Column Name="Select" CheckBoxHeader="true" CheckBoxValue="@selectAllValue" CheckBoxStateChanged="CheckBoxStateChanged">
            <input class="form-check-input" type="checkbox" checked="@context.isSelect"
                   @onclick="() => CheckBoxStateChanged(context)">
        </Column>
        <Column Name="Name" Label="Name" Sortable="true" SortStateChanged="SortStateChanged" />
        <Column Name="Description" Label="Description" />
        <Column Name="Status" Label="Status" Sortable="true" SortStateChanged="SortStateChanged" />
        <Column Name="CreatedDate" Label="Created Date" Sortable="true" SortStateChanged="SortStateChanged" />
        <Column Name="ModifiedDate" Label="Modified Date" Sortable="true" SortStateChanged="SortStateChanged" />
        <Column Name="Action" Label="Action">
            <button class="cstm-table-button" title="Edit"
                    @onclick="() => InitializeCategory(context.CategoryID)">
                <span class="oi oi-pencil" aria-hidden="true"></span>
            </button>
        </Column>
    </Columns>
</Table>

@code {
    #region Variable(s)
    private bool showLoader = false;
    private bool selectAllValue = false;
    private bool statusButtons = true;

    private CategoryInfoComponent? categoryInfo;
    private List<Category> categoryList = new List<Category>();
    #endregion

    #region Event Handler Functions
    protected override async Task OnInitializedAsync()
    {
        showLoader = true;
        //Delay Process for .5 second
        await Task.Delay(Constants.DELAY_PROCESS);
        await PopulateCategories();
        showLoader = false;
    }

    private async Task SearchValueChanged(string query)
    {
        await PopulateCategories(query);
    }

    private async Task StatusButtonsClicked(int value)
    {
        var functionID = string.Empty;
        switch (value)
        {
            case Constants.STATUS_ENABLED_INT:
            case Constants.STATUS_DISABLED_INT:
                functionID = Constants.FUNCTION_ID_BULK_CHANGE_CATEGORY_BY_ADMIN;
                break;
            default:
                functionID = Constants.FUNCTION_ID_BULK_DELETE_CATEGORY_BY_ADMIN;
                break;
        }
        await UpdateStatusByIDs(functionID, Constants.REQUEST_STATUS_COMPLETED, value);
    }

    private async Task InitializeCategory(object id)
    {
        CheckBoxStateChanged(false);

        if (categoryInfo == null)
            return;

        var param = id == null ? Guid.Empty : (Guid)id;
        await categoryInfo.InitializeCategory(param);
    }

    private async Task CategoryInfoResponse(Response res)
    {
        if (res != null && res.Result == ResponseResult.SUCCESS)
        {
            await PopulateCategories();
            _toast.ShowSuccess(res.Data);
        }
    }

    private void CheckBoxStateChanged(Category category)
    {
        category.isSelect = !category.isSelect;
        EnableStatusButtons();
    }

    private void CheckBoxStateChanged(bool value)
    {
        selectAllValue = value;
        foreach (var category in categoryList)
        {
            category.isSelect = value;
        }
        EnableStatusButtons();
    }

    private void SortStateChanged(SortSetting sort)
    {
        categoryList = Utility.SortList<Category>(categoryList, sort);
    }
    #endregion

    #region Common Functions
    private async Task PopulateCategories(string? query = null)
    {
        selectAllValue = false;

        Response response;
        if (string.IsNullOrEmpty(query))
            response = await _http.GetRequestAsync(Globals.GET_CATEGORIES, Globals.ClientInformation.ClientID);
        else
            response = await _http.GetRequestAsync(Globals.GET_CATEGORIES_BY_QUERY, Globals.ClientInformation.ClientID, query);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }

        categoryList = JsonConvert.DeserializeObject<List<Category>>(response.Data)!;
        EnableStatusButtons();
    }

    private async Task UpdateStatusByIDs(string functionID, string requestStatus, int newStatus)
    {
        var request = new UpdateStatusByGUIDsRequest
            {
                FunctionID = functionID,
                RequestStatus = requestStatus,
                client = Globals.ClientInformation,
                IDs = categoryList.Where(data => data.isSelect)
                                   .Select(data => data.CategoryID)
                                   .ToList(),
                newStatus = newStatus
            };

        var response = await _http.PostRequestAsync(Globals.POST_UPDATE_CATEGORY_STATUS_BY_IDS, request);

        if (response.Result != ResponseResult.SUCCESS)
        {
            _toast.ShowError(response.Data);
            return;
        }
        await PopulateCategories();
        _toast.ShowSuccess(response.Data);
    }

    private void EnableStatusButtons()
    {
        statusButtons = categoryList.Where(data => data.isSelect).Count() == 0;
    }
    #endregion
}
