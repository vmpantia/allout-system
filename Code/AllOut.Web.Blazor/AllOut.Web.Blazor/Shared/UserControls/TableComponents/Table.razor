@attribute [CascadingTypeParameter(nameof(TItem))]
@typeparam TItem

<table class="cstm-table">
    <thead>
        <tr>
            @Columns(default(TItem))
        </tr> 
    </thead>
    <tbody>
        @if (DataSource == null || DataSource.Count == Constants.ZERO)
        {
            PageCount = Constants.ZERO;
            PageNo = Constants.DEFAULT_PAGE_NO;
            <tr>
                <td colspan="@ColumnCount">
                    <div class="cstm-no-records">
                        @Constants.ERROR_NO_RECORDS
                    </div>
                </td>
            </tr>
        }
        else
        {
            if (Pagination)
                Items = DataSource.Skip(PageSize * (PageNo - Constants.DEFAULT_PAGE_NO)).Take(PageSize).ToList();
            else
                Items = DataSource.ToList();

            @foreach(var data in Items)
            {
                <CascadingValue Value="data">
                    <tr>
                        @Columns(data)
                    </tr>
                </CascadingValue>
            }
        }
    </tbody>
</table>


@if (Pagination && DataSource != null)
{
    PageCount = (int)Math.Ceiling((double)DataSource.Count() / PageSize);

    if (PageCount <= Constants.DEFAULT_PAGE_NO)
        return;

    <div class="cstm-table-pagination">
        <button disabled="@(!(PageNo > Constants.DEFAULT_PAGE_NO))" title="Go to Previous Page" @onclick="() => PageChange(false)">
            <span class="oi oi-caret-left" aria-hidden="true"></span> 
        </button>

        <span class="page-details">@PageNo of @PageCount</span>

        <button disabled="@(!(PageNo < PageCount))" title="Go to Next Page" @onclick="() => PageChange(true)">
            <span class="oi oi-caret-right" aria-hidden="true"></span>
        </button>
    </div>
}


@code {
    [Parameter]
    public List<TItem> DataSource { get; set; }
    public List<TItem> Items { get; set; }

    [Parameter]
    public int ColumnCount { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Columns { get; set; }

    public int PageCount { get; set; }
    public int PageSize { get; set; } = Constants.DEFAULT_PAGE_SIZE;
    public int PageNo { get; set; } = Constants.DEFAULT_PAGE_NO;

    [Parameter]
    public bool Pagination { get; set; }

    private void PageChange(bool isNext)
    {
        int currentPage;
        if (isNext)
            currentPage = PageNo + Constants.DEFAULT_PAGE_NO;
        else
            currentPage = PageNo - Constants.DEFAULT_PAGE_NO;

        if (currentPage > PageCount)
            return;
        PageNo = currentPage;
    }
}
