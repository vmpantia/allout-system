@typeparam TItem

@if(Item == null) {
    <th class="@css">
        @if (CheckBoxHeader)
        {
            <input class="form-check-input" type="checkbox" checked="@CheckBoxValue" @onclick="() => CheckBoxClick()">
        }
        else {
            @Label
        }
    </th>
}
else if(ChildContent == null) {
    var property = typeof(TItem).GetProperty(Name);

    if (property == null)
        return;

    var value = property.GetValue(Item);

    <td class="@css">
        @switch(Name)
        {
            case "Status":
                var status = Utility.ConvertStatusToString((int)value);
                <span class="cstm-badge-@status">
                    @status
                </span>
                break;
            case "CreatedDate":
            case "ModifiedDate":
                @(value == null ? Constants.NA : 
                                  ((DateTime)value).ToString(Constants.DATE_FORMAT))
                break;
            default:
                @value
                break;
        }
    </td>
}
else {
    <td class="@css">@ChildContent</td>
}

@code {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Label { get; set; }

    [CascadingParameter]
    public TItem Item { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public string css { 
        get
        {
            switch (Name)
            {
                case "Select":
                    return "cstm-column-checkbox";
                case "Status":
                    return "cstm-column-status";
                case "CreatedDate":
                case "ModifiedDate":
                    return "cstm-column-date";
                case "Action":
                    return "cstm-column-button";
                default:
                    return string.Empty;
            }
        }
    }

    [Parameter]
    public bool CheckBoxHeader { get; set; }

    [Parameter]
    public bool CheckBoxValue { get; set; }

    [Parameter]
    public EventCallback<bool> CheckBoxStateChanged { get; set; }

    private async Task CheckBoxClick()
    {
        CheckBoxValue = !CheckBoxValue;
        await CheckBoxStateChanged.InvokeAsync(CheckBoxValue);
    }

}
