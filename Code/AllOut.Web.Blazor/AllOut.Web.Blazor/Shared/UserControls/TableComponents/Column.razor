@typeparam TItem

@if(Item == null) {
    <th class="@css">
        @if (CheckBoxHeader)
        {
            <input class="form-check-input" type="checkbox" checked="@CheckBoxValue" @onclick="() => CheckBoxClick()">
        }
        else if (Sortable)
        {
            <button type="button" @onclick="() => SortClick()" title="Sort by @Name">
                @Label
            </button>
        }
        else
        {
            @Label
        }
    </th>
}
else if(ChildContent == null) {
    var property = typeof(TItem).GetProperty(Name);

    if (property == null)
        return;

    var value = property.GetValue(Item);

    <td class="@css">
        @switch(Name)
        {
            case Constants.PROP_STATUS:
                var status = Utility.ConvertStatusToString((int)value);
                <span class="cstm-badge-@status">
                    @status
                </span>
                break;
            case Constants.PROP_CREATED_DATE:
            case Constants.PROP_MODIFIED_DATE:
                @(value == null ? Constants.NA : 
                                              ((DateTime)value).ToString(Constants.FORMAT_DATE))
                break;
            //This condition is for Roles Only
            case Constants.PROP_ADD:
            case Constants.PROP_EDIT:
            case Constants.PROP_DELETE:
                @if (value == null)
                {
                    @Constants.NA
                }
                else
                {
                    var values = ((string)value).Split(Constants.NEWLINE);
                    var makeNewLine = 0;
                    for(var idx = 0; idx < values.Count() - 1; idx++)
                    {
                        if(makeNewLine == 4)
                        {
                            makeNewLine = 0;
                            <br />
                        }
                        <span class="cstm-permission-@idx">
                            @values[idx]
                        </span>
                        makeNewLine++;
                    }
                }
                break;
            default:
                @value
                break;
        }
    </td>
}
else {
    <td class="@css">@ChildContent</td>
}

@code {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string Label { get; set; }

    [CascadingParameter]
    public TItem Item { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public string css { 
        get
        {
            switch (Name)
            {
                case Constants.PROP_SELECT:
                    return Constants.CSS_COLUMN_CHECKBOX;
                case Constants.PROP_STATUS:
                    return Constants.CSS_COLUMN_STATUS;
                case Constants.PROP_CREATED_DATE:
                case Constants.PROP_MODIFIED_DATE:
                    return Constants.CSS_COLUMN_DATE;
                case Constants.PROP_ACTION:
                    return Constants.CSS_COLUMN_BUTTON;
                default:
                    return string.Empty;
            }
        }
    }

    [Parameter]
    public bool CheckBoxHeader { get; set; }

    [Parameter]
    public bool CheckBoxValue { get; set; }

    [Parameter]
    public EventCallback<bool> CheckBoxStateChanged { get; set; }

    private async Task CheckBoxClick()
    {
        if (CheckBoxHeader)
        {
            //If CheckBoxHeader is TRUE do the statement below
            CheckBoxValue = !CheckBoxValue;
            await CheckBoxStateChanged.InvokeAsync(CheckBoxValue);
        }
    }

    [Parameter]
    public bool Sortable { get; set; }

    public bool isAscending { get; set; } = true;

    [Parameter]
    public EventCallback<SortSetting> SortStateChanged { get; set; }

    private async Task SortClick()
    {
        if (Sortable && !CheckBoxHeader)
        {
            //If Sortable is TRUE and CheckBoxHeader is False do the statement below
            isAscending = !isAscending;
            var sort = new SortSetting
            {
                PorpertyName = Name,
                isAscending = isAscending
            };
            await SortStateChanged.InvokeAsync(sort);
        }
    }

}
